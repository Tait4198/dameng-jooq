/*
 * This file is generated by jOOQ.
 */
package org.example.dm.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.example.dm.DbTest;
import org.example.dm.Keys;
import org.example.dm.tables.records.TableTestRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableTestTable extends TableImpl<TableTestRecord> {

    private static final long serialVersionUID = 1917299300;

    /**
     * The reference instance of <code>DB_TEST.TABLE_TEST</code>
     */
    public static final TableTestTable TABLE_TEST = new TableTestTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableTestRecord> getRecordType() {
        return TableTestRecord.class;
    }

    /**
     * The column <code>DB_TEST.TABLE_TEST.ID</code>.
     */
    public final TableField<TableTestRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>DB_TEST.TABLE_TEST.NAME</code>.
     */
    public final TableField<TableTestRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<TableTestRecord, Object> CONTENT = createField(DSL.name("CONTENT"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>DB_TEST.TABLE_TEST</code> table reference
     */
    public TableTestTable() {
        this(DSL.name("TABLE_TEST"), null);
    }

    /**
     * Create an aliased <code>DB_TEST.TABLE_TEST</code> table reference
     */
    public TableTestTable(String alias) {
        this(DSL.name(alias), TABLE_TEST);
    }

    /**
     * Create an aliased <code>DB_TEST.TABLE_TEST</code> table reference
     */
    public TableTestTable(Name alias) {
        this(alias, TABLE_TEST);
    }

    private TableTestTable(Name alias, Table<TableTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableTestTable(Name alias, Table<TableTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TableTestTable(Table<O> child, ForeignKey<O, TableTestRecord> key) {
        super(child, key, TABLE_TEST);
    }

    @Override
    public Schema getSchema() {
        return DbTest.DB_TEST;
    }

    @Override
    public UniqueKey<TableTestRecord> getPrimaryKey() {
        return Keys.PK_TABLE_TEST;
    }

    @Override
    public List<UniqueKey<TableTestRecord>> getKeys() {
        return Arrays.<UniqueKey<TableTestRecord>>asList(Keys.PK_TABLE_TEST);
    }

    @Override
    public TableTestTable as(String alias) {
        return new TableTestTable(DSL.name(alias), this);
    }

    @Override
    public TableTestTable as(Name alias) {
        return new TableTestTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableTestTable rename(String name) {
        return new TableTestTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableTestTable rename(Name name) {
        return new TableTestTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
